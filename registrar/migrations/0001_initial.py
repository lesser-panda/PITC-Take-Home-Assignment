# Generated by Django 5.2 on 2025-04-23 17:23

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('account_manager', 'Account Manager'), ('service_provider', 'Service Provider'), ('customer', 'Customer')], default='customer', max_length=20)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.TextField(blank=True, null=True)),
                ('last_name', models.TextField(blank=True, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('company', models.TextField(blank=True, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('phone', models.TextField(blank=True, null=True)),
                ('bio', models.TextField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AccountManagerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(limit_choices_to={'role': 'account_manager'}, on_delete=django.db.models.deletion.CASCADE, related_name='account_manager_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CustomerAccountManager',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_manager', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registrar.accountmanagerprofile')),
            ],
            options={
                'verbose_name': 'Relationship: Account Manager - Customer',
                'verbose_name_plural': 'Relationships: Account Manager - Customer',
            },
        ),
        migrations.CreateModel(
            name='CustomerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_managers', models.ManyToManyField(blank=True, limit_choices_to={'role': 'account_manager'}, related_name='customers', through='registrar.CustomerAccountManager', through_fields=('customer', 'account_manager'), to='registrar.accountmanagerprofile')),
                ('user', models.OneToOneField(limit_choices_to={'role': 'customer'}, on_delete=django.db.models.deletion.CASCADE, related_name='customer_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='customeraccountmanager',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registrar.customerprofile'),
        ),
        migrations.CreateModel(
            name='ServiceProviderProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(limit_choices_to={'role': 'service_provider'}, on_delete=django.db.models.deletion.CASCADE, related_name='service_provider_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AccountManagerServiceProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_manager', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registrar.accountmanagerprofile')),
                ('service_provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registrar.serviceproviderprofile')),
            ],
            options={
                'verbose_name': 'Relationship: Account Manager - Service Provider',
                'verbose_name_plural': 'Relationships: Account Manager - Service Provider',
                'unique_together': {('account_manager', 'service_provider')},
            },
        ),
        migrations.AddField(
            model_name='accountmanagerprofile',
            name='service_providers',
            field=models.ManyToManyField(blank=True, limit_choices_to={'role': 'service_provider'}, related_name='account_managers', through='registrar.AccountManagerServiceProvider', through_fields=('account_manager', 'service_provider'), to='registrar.serviceproviderprofile'),
        ),
        migrations.AlterUniqueTogether(
            name='customeraccountmanager',
            unique_together={('customer', 'account_manager')},
        ),
    ]
